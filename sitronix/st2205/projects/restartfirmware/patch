
de AD 69 08 sequentie op firmware adres 0x9a83 (mapped in segment 2 op 5a83)
laadt de tijd in voor het laten zien van de rtc

dit zien we ook met   grep -iE "(0869|4000--)" log | grep lda -B 10

memory at 4000--7fff changed bankSelectLo to 02
5a60 5a60 :   ad 69 08   lda  $0869
5a83 5a83 :   ad 69 08   lda  $0869

dit zijn de seconds van de clock die worden ingeladen (deze worden geset vanuit de segment 2 code, zie disassembly listing)

dit lijkt een plek te zijn die alleen hiervoor gebruikt wordt, een jump en een bank mapping zijn snel getest op deze manier

Het hele stuk code begint op 59c9, waar vanuit 59a4 initieel naar toe gesprongen wordt.

dit lijkt wel genoeg plek voor een fatsoenlijke patch.

; the first image, which we use for the code that later gets mapped to $4000-$8000, still has 16kb of free space at the end,
; map the whole range to $8000-$ffff, and start executing code at $c000

stz $35
lda #$2
sta $34
jmp $c000

; which assembles to 9 bytes:

C000 6435                3  stz $35
C002 A902                4  lda #$2
C004 8534                5  sta $34
C006 4C00C0              6  jmp $c000

; patch the firmware at offset 0x4000+0x59d2...

; after patching the firmware looks like this:

000099C0   9F 00 9C 0C  03 20 4C 45  60 9C 0C 03  9C 0B 03 AD  6B 08 64 35  A9 02 85 34  4C 00 C0 0A  80 F4 18 69  30 48 18 AD  0B 03 69 30


; Now when we select 'display normal clock', the firmware will jump to the code stored in the first image at offset 0x4000 (mapped to offset 0xc000 in memory)
; this is where i intend to put the code generated by payloadgenerator, which can then in turn fix the bank settings and poke everything to ram

